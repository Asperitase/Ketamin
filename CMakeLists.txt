# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include("cmake/cmkr.cmake" OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS cmake.toml)
endif()

project(ketamin
	LANGUAGES
		CXX
	VERSION
		1.0.0
)

include(FetchContent)

# Fix warnings about DOWNLOAD_EXTRACT_TIMESTAMP
if(POLICY CMP0135)
	cmake_policy(SET CMP0135 NEW)
endif()
message(STATUS "Fetching shadowsyscall (shellcode)...")
FetchContent_Declare(shadowsyscall
	GIT_REPOSITORY
		"https://github.com/annihilatorq/shadow_syscall"
	GIT_TAG
		shellcode
	GIT_SHALLOW
		ON
)
FetchContent_MakeAvailable(shadowsyscall)

message(STATUS "Fetching fmt (11.1.3)...")
FetchContent_Declare(fmt
	GIT_REPOSITORY
		"https://github.com/fmtlib/fmt"
	GIT_TAG
		11.1.3
	GIT_SHALLOW
		ON
)
FetchContent_MakeAvailable(fmt)

# Target: ketamin
set(ketamin_SOURCES
	cmake.toml
	"src/core/core.cpp"
	"src/core/core.hpp"
	"src/external/ImGui/imconfig.h"
	"src/external/ImGui/imgui.cpp"
	"src/external/ImGui/imgui.h"
	"src/external/ImGui/imgui_data.hpp"
	"src/external/ImGui/imgui_demo.cpp"
	"src/external/ImGui/imgui_draw.cpp"
	"src/external/ImGui/imgui_impl_dx11.cpp"
	"src/external/ImGui/imgui_impl_dx11.h"
	"src/external/ImGui/imgui_impl_win32.cpp"
	"src/external/ImGui/imgui_impl_win32.h"
	"src/external/ImGui/imgui_internal.h"
	"src/external/ImGui/imgui_tables.cpp"
	"src/external/ImGui/imgui_widgets.cpp"
	"src/external/ImGui/imstb_rectpack.h"
	"src/external/ImGui/imstb_textedit.h"
	"src/external/ImGui/imstb_truetype.h"
	"src/external/resources/font/Glory.hpp"
	"src/external/resources/font/GloryBold.hpp"
	"src/external/resources/icon/icons.hpp"
	"src/feature/category_list.hpp"
	"src/feature/feature.cpp"
	"src/feature/feature.hpp"
	"src/feature/feature/overlay/components/header_panel.hpp"
	"src/feature/feature/overlay/components/panel.hpp"
	"src/feature/feature/overlay/components/weapon_panel.hpp"
	"src/feature/feature/overlay/context.hpp"
	"src/feature/feature/overlay/impl/overlay.cpp"
	"src/feature/feature/overlay/impl/overlay.hpp"
	"src/feature/feature/overlay/overlay_config.hpp"
	"src/feature/feature/overlay/overlay_types.hpp"
	"src/feature/manager.cpp"
	"src/feature/manager.hpp"
	"src/feature/settings.hpp"
	"src/imgui_manager/data.hpp"
	"src/imgui_manager/imgui_manager.cpp"
	"src/imgui_manager/imgui_manager.hpp"
	"src/imgui_manager/settings.hpp"
	"src/main.cpp"
	"src/rust/weapon/factory/builder/weapon_builder.cpp"
	"src/rust/weapon/factory/builder/weapon_builder.hpp"
	"src/rust/weapon/factory/builder/weapon_registry.cpp"
	"src/rust/weapon/factory/builder/weapon_registry.hpp"
	"src/rust/weapon/factory/weapon_factory.cpp"
	"src/rust/weapon/factory/weapon_factory.hpp"
	"src/rust/weapon/interfaces.hpp"
	"src/rust/weapon/modules/base/base_module.cpp"
	"src/rust/weapon/modules/base/base_module.hpp"
	"src/rust/weapon/modules/base/module_container.cpp"
	"src/rust/weapon/modules/base/module_container.hpp"
	"src/rust/weapon/modules/magazine/magazine_module.cpp"
	"src/rust/weapon/modules/magazine/magazine_module.hpp"
	"src/rust/weapon/modules/modifier_module/modifier_module.cpp"
	"src/rust/weapon/modules/modifier_module/modifier_module.hpp"
	"src/rust/weapon/modules/name.hpp"
	"src/rust/weapon/types.hpp"
	"src/rust/weapon/weapons/base/weapon_base.cpp"
	"src/rust/weapon/weapons/base/weapon_base.hpp"
	"src/rust/weapon/weapons/other/other_entity.cpp"
	"src/rust/weapon/weapons/other/other_entity.hpp"
	"src/rust/weapon/weapons/pistol/pistol_entity.cpp"
	"src/rust/weapon/weapons/pistol/pistol_entity.hpp"
	"src/rust/weapon/weapons/rifle/rifle_entity.cpp"
	"src/rust/weapon/weapons/rifle/rifle_entity.hpp"
	"src/rust/weapon/weapons/semi/semi_entity.cpp"
	"src/rust/weapon/weapons/semi/semi_entity.hpp"
	"src/rust/weapon/weapons/shotgun/shotgun_entity.cpp"
	"src/rust/weapon/weapons/shotgun/shotgun_entity.hpp"
	"src/rust/weapon/weapons/smg/smg_entity.cpp"
	"src/rust/weapon/weapons/smg/smg_entity.hpp"
	"src/rust/weapon/weapons/sniper/sniper_entity.cpp"
	"src/rust/weapon/weapons/sniper/sniper_entity.hpp"
	"src/settings.hpp"
	"src/utils/logger.hpp"
	"src/utils/mouse/mouse.cpp"
	"src/utils/mouse/mouse.hpp"
	"src/utils/mouse/mouse_interface.hpp"
	"src/utils/mouse/mouse_result.hpp"
	"src/utils/mouse/mouse_types.hpp"
	"src/utils/random_string.hpp"
	"src/utils/result_error.hpp"
	"src/window/render/directx11.cpp"
	"src/window/render/directx11.hpp"
	"src/window/window.cpp"
	"src/window/window.hpp"
	"src/window/window_constants.hpp"
)

add_executable(ketamin)

target_sources(ketamin PRIVATE ${ketamin_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${ketamin_SOURCES})

target_compile_features(ketamin PRIVATE
	cxx_std_23
)

target_include_directories(ketamin PRIVATE
	"src/"
	"C:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include"
)

target_link_libraries(ketamin PRIVATE
	shadowsyscall
	fmt::fmt
	ntdll
)

set_target_properties(ketamin PROPERTIES
	CXX_STANDARD
		23
	CXX_STANDARD_REQUIRED
		ON
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ketamin)
endif()
